{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\data\\\\screens\\\\LoginScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport YellowBox from \"react-native-web/dist/exports/YellowBox\";\nimport * as firebase from 'firebase';\nimport * as Permissions from 'expo-permissions';\nimport { Notifications } from 'expo';\nimport TextInput from \"../components/TextInput\";\nimport Button from \"../components/Button\";\nimport { emailValidator, passwordValidator } from \"../core/util\";\nimport { theme } from \"../core/theme\";\nimport Toast from \"../components/Toast\";\nimport Background from \"../components/Background\";\nimport { loginUser } from \"../api/authApi\";\nYellowBox.ignoreWarnings(['Setting a timer']);\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDmgiC0Wg3OWN9vaaKhShwBgSARzom2pGI\",\n  authDomain: \"forex-48c83.firebaseapp.com\",\n  databaseURL: \"https://forex-48c83.firebaseio.com\",\n  projectId: \"forex-48c83\",\n  storageBucket: \"forex-48c83.appspot.com\",\n  messagingSenderId: \"8821353145\",\n  appId: \"1:8821353145:web:e10d5a4a4932e491eb8968\",\n  measurementId: \"G-H4FW8ZTHBV\"\n};\nfirebase.initializeApp(firebaseConfig);\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  console.ignoredYellowBox = ['Setting a timer'];\n\n  var _useState = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState({\n    value: \"\",\n    error: \"\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      error = _useState8[0],\n      setError = _useState8[1];\n\n  var _onLoginPressed = function _onLoginPressed() {\n    var emailError, passwordError, response;\n    return _regeneratorRuntime.async(function _onLoginPressed$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!loading) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            emailError = emailValidator(email.value);\n            passwordError = passwordValidator(password.value);\n\n            if (!(emailError || passwordError)) {\n              _context.next = 8;\n              break;\n            }\n\n            setEmail(_objectSpread(_objectSpread({}, email), {}, {\n              error: emailError\n            }));\n            setPassword(_objectSpread(_objectSpread({}, password), {}, {\n              error: passwordError\n            }));\n            return _context.abrupt(\"return\");\n\n          case 8:\n            setLoading(true);\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(loginUser({\n              email: email.value,\n              password: password.value\n            }));\n\n          case 11:\n            response = _context.sent;\n\n            if (response.error) {\n              setError(response.error);\n            }\n\n            setLoading(false);\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(firebase.auth().onAuthStateChanged(function (user) {\n              if (user) {\n                console.log(\"Data\");\n                console.log(user.uid);\n\n                _this.registerForPushNotificationsAsync(user.uid);\n              }\n            }));\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  registerForPushNotificationsAsync = function registerForPushNotificationsAsync(res) {\n    var _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status, token, updates;\n\n    return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n          case 2:\n            _await$Permissions$ge = _context2.sent;\n            existingStatus = _await$Permissions$ge.status;\n            finalStatus = existingStatus;\n\n            if (!(existingStatus !== 'granted')) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n          case 8:\n            _await$Permissions$as = _context2.sent;\n            status = _await$Permissions$as.status;\n            finalStatus = status;\n\n          case 11:\n            if (!(finalStatus !== 'granted')) {\n              _context2.next = 13;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 13:\n            _context2.next = 15;\n            return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n          case 15:\n            token = _context2.sent;\n            console.log(token);\n            console.log(\"Some\");\n            console.log(res);\n            console.log(\"More\");\n            updates = {};\n            updates['/expoToken'] = token;\n            _context2.next = 24;\n            return _regeneratorRuntime.awrap(firebase.database().ref('/users/' + res).update(updates));\n\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Background, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    label: \"Email\",\n    returnKeyType: \"next\",\n    value: email.value,\n    onChangeText: function onChangeText(text) {\n      return setEmail({\n        value: text,\n        error: \"\"\n      });\n    },\n    error: !!email.error,\n    errorText: email.error,\n    autoCapitalize: \"none\",\n    autoCompleteType: \"email\",\n    textContentType: \"emailAddress\",\n    keyboardType: \"email-address\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), React.createElement(TextInput, {\n    label: \"Password\",\n    returnKeyType: \"done\",\n    value: password.value,\n    onChangeText: function onChangeText(text) {\n      return setPassword({\n        value: text,\n        error: \"\"\n      });\n    },\n    error: !!password.error,\n    errorText: password.error,\n    secureTextEntry: true,\n    autoCapitalize: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    loading: loading,\n    mode: \"contained\",\n    onPress: _onLoginPressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 1\n    }\n  }, \"Login\"), React.createElement(Toast, {\n    message: error,\n    onDismiss: function onDismiss() {\n      return setError(\"\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: \"100%\",\n    alignItems: \"flex-end\",\n    marginBottom: 24\n  },\n  row: {\n    flexDirection: \"row\",\n    marginTop: 4\n  },\n  label: {\n    color: theme.colors.secondary\n  },\n  link: {\n    fontWeight: \"bold\",\n    color: theme.colors.primary\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["E:/data/screens/LoginScreen.js"],"names":["React","Component","useState","firebase","Permissions","Notifications","TextInput","Button","emailValidator","passwordValidator","theme","Toast","Background","loginUser","YellowBox","ignoreWarnings","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","LoginScreen","navigation","console","ignoredYellowBox","value","error","email","setEmail","password","setPassword","loading","setLoading","setError","_onLoginPressed","emailError","passwordError","response","auth","onAuthStateChanged","user","log","uid","registerForPushNotificationsAsync","res","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","getExpoPushTokenAsync","token","updates","database","ref","update","text","styles","StyleSheet","create","forgotPassword","width","alignItems","marginBottom","row","flexDirection","marginTop","label","color","colors","secondary","link","fontWeight","primary"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport { View,Text, AsyncStorage, StyleSheet, Image, YellowBox } from 'react-native';\nimport * as firebase from 'firebase';\n// import { Container, Content, Header, Form, Input, Item,Button, Label } from 'native-base'\n// import * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport { Notifications } from 'expo'\nimport TextInput from '../components/TextInput'\nimport Button from '../components/Button'\nimport { emailValidator, passwordValidator } from '../core/util'\nimport { theme } from '../core/theme'\nimport Toast from '../components/Toast'\nimport Background from '../components/Background'\nimport { loginUser } from '../api/authApi'\n\nYellowBox.ignoreWarnings(['Setting a timer']);\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDmgiC0Wg3OWN9vaaKhShwBgSARzom2pGI\",\n    authDomain: \"forex-48c83.firebaseapp.com\",\n    databaseURL: \"https://forex-48c83.firebaseio.com\",\n    projectId: \"forex-48c83\",\n    storageBucket: \"forex-48c83.appspot.com\",\n    messagingSenderId: \"8821353145\",\n    appId: \"1:8821353145:web:e10d5a4a4932e491eb8968\",\n    measurementId: \"G-H4FW8ZTHBV\"\n  };\n  \n\n\n  firebase.initializeApp(firebaseConfig);\n\n  const LoginScreen = ({ navigation }) => {\n    console.ignoredYellowBox = ['Setting a timer'];\n    const [email, setEmail] = useState({ value: \"\", error: \"\" });\n    const [password, setPassword] = useState({ value: \"\", error: \"\" });\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(\"\");\n\n    const _onLoginPressed = async () => {\n        if (loading) return;\n    \n        const emailError = emailValidator(email.value);\n        const passwordError = passwordValidator(password.value);\n    \n        if (emailError || passwordError) {\n          setEmail({ ...email, error: emailError });\n          setPassword({ ...password, error: passwordError });\n          return;\n        }\n    \n        setLoading(true);\n    \n        const response = await loginUser({\n          email: email.value,\n          password: password.value\n        });\n    \n        if (response.error) {\n          setError(response.error);\n        }\n    \n        setLoading(false);\n       \n        // console.log(response.uid)\n        await firebase.auth().onAuthStateChanged(user => {\n          if (user) {\n            console.log(\"Data\")\n            console.log(user.uid)\n            this.registerForPushNotificationsAsync(user.uid)\n          }\n      })\n        \n      };\n      registerForPushNotificationsAsync = async (res) => {\n        const {status : existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n        let finalStatus = existingStatus;\n\n        // only ask if permissions have not already been determined, because\n        // iOS won't necessarily prompt the user a second time.\n        if (existingStatus !== 'granted') {\n            // Android remote notification permissions are granted during the app\n            // install, so this will only ask on iOS\n            const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n            finalStatus = status;\n        }\n\n        // Stop here if the user did not grant permissions\n        if (finalStatus !== 'granted') {\n            return;\n        }\n\n        // Get the token that uniquely identifies this device\n        let token = await Notifications.getExpoPushTokenAsync();\n        console.log(token)\n        console.log(\"Some\")\n        console.log(res)\n        console.log(\"More\")\n        // POST the token to our backend so we can use it to send pushes from there\n        var updates = {}\n        updates['/expoToken'] = token\n        // console.log(user.uid)\n        await firebase.database().ref('/users/' + res).update(updates)\n        //call the push notification \n    }\n\n\n      return(\n\n        <Background>  \n        <TextInput\n        label=\"Email\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={text => setEmail({ value: text, error: \"\" })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n\n      <TextInput\n      label=\"Password\"\n      returnKeyType=\"done\"\n      value={password.value}\n      onChangeText={text => setPassword({ value: text, error: \"\" })}\n      error={!!password.error}\n      errorText={password.error}\n      secureTextEntry\n      autoCapitalize=\"none\"\n    />\n\n<Button loading={loading} mode=\"contained\" onPress={_onLoginPressed}>\n        Login\n      </Button>\n\n      <Toast message={error} onDismiss={() => setError(\"\")} />\n\n   </Background>\n      );\n  }\n\n    \n// class LoginScreen extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = ({ \n//             email: '',\n//             password: ''\n//          });\n//     }\n\n//     saveToLocalStorage =  (email, password) => {\n       \n//         try {\n//             firebase.auth().signInWithEmailAndPassword(email, password).then( (res) => {\n//             //    this.props.navigation.navigate('Home');\n//                     console.log(\"here\", email,password)\n//                     if(res){\n//                         // console.log(email,password)\n\n//                         AsyncStorage.setItem('isLoggedIn','true');\n//                         AsyncStorage.setItem(res.uid)\n//                          this.props.navigation.navigate('Main', {screen:'Home'});\n//                          console.log(res.uid)\n//                          this.registerForPushNotificationsAsync(res)\n//                           alert('Data successfully saved')\n//                     }\n//             })\n            \n//           } catch (error) {\n//             // Error saving data\n//             console.log(error.toString())\n//             alert('Failed to save the data to the storage')\n//           }\n \n//     }\n//     registerForPushNotificationsAsync = async (res) => {\n//         const {status : existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n//         let finalStatus = existingStatus;\n\n//         // only ask if permissions have not already been determined, because\n//         // iOS won't necessarily prompt the user a second time.\n//         if (existingStatus !== 'granted') {\n//             // Android remote notification permissions are granted during the app\n//             // install, so this will only ask on iOS\n//             const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n//             finalStatus = status;\n//         }\n\n//         // Stop here if the user did not grant permissions\n//         if (finalStatus !== 'granted') {\n//             return;\n//         }\n\n//         // Get the token that uniquely identifies this device\n//         let token = await Notifications.getExpoPushTokenAsync();\n//         console.log(token)\n//         console.log(res.user.uid)\n//         // POST the token to our backend so we can use it to send pushes from there\n//         var updates = {}\n//         updates['/expoToken'] = token\n//         // console.log(user.uid)\n//         await firebase.database().ref('/users/' + res.user.uid).update(updates)\n//         //call the push notification \n//     }\n\n\n//     loginUser = async (email, password) => {\n//         // var that = this\n//             console.log(email,password)\n//         try {\n\n//             firebase.auth().signInWithEmailAndPassword(email, password).then(function (user) {\n//                 // console.log(user)\n//                 // that.registerForPushNotificationsAsync(user)\n//                 this.saveToLocalStorage()\n//             //    this.props.navigation.navigate('Main', {screen:'Home'});\n\n//             })\n//         }\n//         catch (error) {\n//             console.log(error.toString())\n//         }\n\n//     }\n\n//     render() {\n//         return (\n//          <Container style={styles.container}>\n//              <View  style={styles.imageContainer}>\n//              <Image style={styles.LoginImage} source = {require('../assets/login.png')} />\n//              </View>\n\n//              <View  style={{flex:1,justifyContent:'center',alignContent:'center'}}>\n//              <Form >\n               \n//                     <Item floatingLabel>\n//                         <Label>Email</Label>\n//                         <Input\n//                         style={{width: 100}}\n//                             autoCorrect={false}\n//                             autoCapitalize=\"none\"\n//                             onChangeText={(email) => this.setState({ email })}\n//                         />\n\n//                     </Item>\n\n//                     <Item floatingLabel>\n//                         <Label>Password</Label>\n//                         <Input\n//                             secureTextEntry={true}\n//                             autoCorrect={false}\n//                             autoCapitalize=\"none\"\n//                             onChangeText={(password) => this.setState({ password })}\n//                         />\n//                     </Item>\n\n\n                 \n//                     <Button\n//                     full\n//                     rounded\n//                     style={{marginTop : 20}}\n//                     // style={styles.loginButton}\n//                 // title=\"Login\"\n//                 onPress={() => {this.saveToLocalStorage(this.state.email, this.state.password)}}\n//                 >\n//                     <Text>Login</Text>\n//                 </Button>\n//             </Form>\n//             </View>\n//          </Container>\n//         );\n//     }\n// }\n\n// const styles = StyleSheet.create({\n//     container: {\n//         flex: 1,\n//         backgroundColor: '#fff',\n//         justifyContent: 'center',\n//         padding: 10\n//     },\n//     loginButton : {\n    \n//     },\n//     LoginImage : {\n//         width : 230,\n//         height : 200,\n//     },\n//     imageContainer : {\n//         flex: 1,\n//         flexDirection: 'column',\n//         justifyContent: 'center',\n//         alignItems: 'center',\n//     }\n// });\n\nconst styles = StyleSheet.create({\n    forgotPassword: {\n      width: \"100%\",\n      alignItems: \"flex-end\",\n      marginBottom: 24\n    },\n    row: {\n      flexDirection: \"row\",\n      marginTop: 4\n    },\n    label: {\n      color: theme.colors.secondary\n    },\n    link: {\n      fontWeight: \"bold\",\n      color: theme.colors.primary\n    }\n  });\n  \nexport default LoginScreen;\n\n"]},"metadata":{},"sourceType":"module"}