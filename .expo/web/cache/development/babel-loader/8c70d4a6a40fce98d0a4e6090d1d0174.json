{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as firebase from 'firebase';\nexport var logoutUser = function logoutUser() {\n  firebase.auth().signOut();\n};\nexport var loginUser = function loginUser(_ref) {\n  var email, password;\n  return _regeneratorRuntime.async(function loginUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          email = _ref.email, password = _ref.password;\n          _context.prev = 1;\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(email, password));\n\n        case 4:\n          return _context.abrupt(\"return\", {});\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](1);\n          _context.t1 = _context.t0.code;\n          _context.next = _context.t1 === \"auth/invalid-email\" ? 12 : _context.t1 === \"auth/user-not-found\" ? 13 : _context.t1 === \"auth/wrong-password\" ? 13 : _context.t1 === \"auth/too-many-requests\" ? 14 : 15;\n          break;\n\n        case 12:\n          return _context.abrupt(\"return\", {\n            error: \"Invalid email address format.\"\n          });\n\n        case 13:\n          return _context.abrupt(\"return\", {\n            error: \"Invalid email address or password.\"\n          });\n\n        case 14:\n          return _context.abrupt(\"return\", {\n            error: \"Too many request. Try again in a minute.\"\n          });\n\n        case 15:\n          return _context.abrupt(\"return\", {\n            error: \"Check your internet connection.\"\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 7]], Promise);\n};","map":{"version":3,"sources":["E:/data/api/authApi.js"],"names":["firebase","logoutUser","auth","signOut","loginUser","email","password","signInWithEmailAndPassword","code","error"],"mappings":";AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AAGA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAC9BD,EAAAA,QAAQ,CAACE,IAAT,GAAgBC,OAAhB;AACD,CAFM;AAIP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,QAASA,KAAT,EAAgBC,QAAhB,QAAgBA,QAAhB;AAAA;AAAA;AAAA,2CAEfN,QAAQ,CAACE,IAAT,GAAgBK,0BAAhB,CAA2CF,KAA3C,EAAkDC,QAAlD,CAFe;;AAAA;AAAA,2CAGd,EAHc;;AAAA;AAAA;AAAA;AAAA,wBAKb,YAAME,IALO;AAAA,0CAMd,oBANc,wBAUd,qBAVc,wBAWd,qBAXc,wBAed,wBAfc;AAAA;;AAAA;AAAA,2CAOV;AACLC,YAAAA,KAAK,EAAE;AADF,WAPU;;AAAA;AAAA,2CAYV;AACLA,YAAAA,KAAK,EAAE;AADF,WAZU;;AAAA;AAAA,2CAgBV;AACLA,YAAAA,KAAK,EAAE;AADF,WAhBU;;AAAA;AAAA,2CAoBV;AACLA,YAAAA,KAAK,EAAE;AADF,WApBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB","sourcesContent":["import * as firebase from 'firebase';\n\n\nexport const logoutUser = () => {\n  firebase.auth().signOut();\n};\n\nexport const loginUser = async ({ email, password }) => {\n  try {\n    await firebase.auth().signInWithEmailAndPassword(email, password);\n    return {   };\n  } catch (error) {\n    switch (error.code) {\n      case \"auth/invalid-email\":\n        return {\n          error: \"Invalid email address format.\"\n        };\n      case \"auth/user-not-found\":\n      case \"auth/wrong-password\":\n        return {\n          error: \"Invalid email address or password.\"\n        };\n      case \"auth/too-many-requests\":\n        return {\n          error: \"Too many request. Try again in a minute.\"\n        };\n      default:\n        return {\n          error: \"Check your internet connection.\"\n        };\n    }\n  }\n};\n\n"]},"metadata":{},"sourceType":"module"}