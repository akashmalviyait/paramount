{"ast":null,"code":"var _jsxFileName = \"E:\\\\data\\\\screens\\\\CallScreen.js\";\nimport React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { IcxStackNavigator, FcxStackNavigator, CcxStackNavigator } from \"../navigation/createStackNavigator\";\nimport { Ionicons } from '@expo/vector-icons';\nvar Tab = createBottomTabNavigator();\n\nvar CallScreen = function CallScreen() {\n  return React.createElement(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n              color = _ref2.color,\n              size = _ref2.size;\n          var iconName;\n\n          if (route.name === 'ICX') {\n            iconName = focused ? 'ios-information-circle' : 'ios-information-circle-outline';\n          } else if (route.name === 'FCX') {\n            iconName = focused ? 'ios-list-box' : 'ios-list';\n          } else if (route.name === 'CCX') {\n            iconName = focused ? 'ios-list-box' : 'ios-list';\n          }\n\n          return React.createElement(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 16\n            }\n          });\n        }\n      };\n    },\n    tabBarOptions: {\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, React.createElement(Tab.Screen, {\n    name: \"ICX\",\n    tabBarIcon: {\n      color: 'red',\n      size: 2\n    },\n    component: IcxStackNavigator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"FCX\",\n    component: FcxStackNavigator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), React.createElement(Tab.Screen, {\n    name: \"CCX\",\n    component: CcxStackNavigator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default CallScreen;","map":{"version":3,"sources":["E:/data/screens/CallScreen.js"],"names":["React","createBottomTabNavigator","IcxStackNavigator","FcxStackNavigator","CcxStackNavigator","Ionicons","Tab","CallScreen","route","tabBarIcon","focused","color","size","iconName","name","activeTintColor","inactiveTintColor"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,+BAAzC;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,EAA+CC,iBAA/C;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAGA,IAAMC,GAAG,GAAGL,wBAAwB,EAApC;;AACA,IAAMM,UAAU,GAAG,SAAbA,UAAa,GAAM;AAEvB,SACE,oBAAC,GAAD,CAAK,SAAL;AACA,IAAA,aAAa,EAAE;AAAA,UAAGC,KAAH,QAAGA,KAAH;AAAA,aAAgB;AAC7BC,QAAAA,UAAU,EAAE,2BAA8B;AAAA,cAA3BC,OAA2B,SAA3BA,OAA2B;AAAA,cAAlBC,KAAkB,SAAlBA,KAAkB;AAAA,cAAXC,IAAW,SAAXA,IAAW;AACxC,cAAIC,QAAJ;;AAEA,cAAIL,KAAK,CAACM,IAAN,KAAe,KAAnB,EAA0B;AACxBD,YAAAA,QAAQ,GAAGH,OAAO,GACd,wBADc,GAEd,gCAFJ;AAGD,WAJD,MAIO,IAAIF,KAAK,CAACM,IAAN,KAAe,KAAnB,EAA0B;AAC/BD,YAAAA,QAAQ,GAAGH,OAAO,GAAG,cAAH,GAAoB,UAAtC;AACD,WAFM,MAGF,IAAIF,KAAK,CAACM,IAAN,KAAe,KAAnB,EAA0B;AAC7BD,YAAAA,QAAQ,GAAGH,OAAO,GAAG,cAAH,GAAoB,UAAtC;AACD;;AAGD,iBAAO,oBAAC,QAAD;AAAU,YAAA,IAAI,EAAEG,QAAhB;AAA0B,YAAA,IAAI,EAAED,IAAhC;AAAsC,YAAA,KAAK,EAAED,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AAjB4B,OAAhB;AAAA,KADf;AAoBA,IAAA,aAAa,EAAE;AACbI,MAAAA,eAAe,EAAE,QADJ;AAEbC,MAAAA,iBAAiB,EAAE;AAFN,KApBf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAyBA,oBAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,KAAjB;AAAuB,IAAA,UAAU,EAAE;AAACL,MAAAA,KAAK,EAAE,KAAR;AAAeC,MAAAA,IAAI,EAAC;AAApB,KAAnC;AAA2D,IAAA,SAAS,EAAEV,iBAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBA,EA0BA,oBAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,KAAjB;AAAuB,IAAA,SAAS,EAAEC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BA,EA2BA,oBAAC,GAAD,CAAK,MAAL;AAAY,IAAA,IAAI,EAAC,KAAjB;AAAuB,IAAA,SAAS,EAAEC,iBAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA3BA,CADF;AAgCD,CAlCD;;AA8KA,eAAeG,UAAf","sourcesContent":["import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { IcxStackNavigator, FcxStackNavigator, CcxStackNavigator } from '../navigation/createStackNavigator';\nimport { Ionicons } from '@expo/vector-icons'\n\n\nconst Tab = createBottomTabNavigator();\nconst CallScreen = () => {\n\n  return(\n    <Tab.Navigator \n    screenOptions={({ route }) => ({\n      tabBarIcon: ({ focused, color, size }) => {\n        let iconName;\n\n        if (route.name === 'ICX') {\n          iconName = focused\n            ? 'ios-information-circle'\n            : 'ios-information-circle-outline';\n        } else if (route.name === 'FCX') {\n          iconName = focused ? 'ios-list-box' : 'ios-list';\n        }\n        else if (route.name === 'CCX') {\n          iconName = focused ? 'ios-list-box' : 'ios-list';\n        }\n\n        // You can return any component that you like here!\n        return <Ionicons name={iconName} size={size} color={color} />;\n      },\n    })}\n    tabBarOptions={{\n      activeTintColor: 'tomato',\n      inactiveTintColor: 'gray',\n    }}\n    >\n    <Tab.Screen name=\"ICX\" tabBarIcon={{color: 'red', size:2}} component={IcxStackNavigator} />\n    <Tab.Screen name=\"FCX\" component={FcxStackNavigator} />\n    <Tab.Screen name=\"CCX\" component={CcxStackNavigator} />\n\n  </Tab.Navigator>\n  )\n}\n\n\n// function getUserData(uid) {\n//   firebase.database().ref('users/' + uid).once(\"value\", snap => {\n//       // console.log(snap.val().ccxservice)\n\n//       setIcxuser(snap.val().icxservice)\n//       setCcxuser(snap.val().ccxservice)\n//       setFcxuser(snap.val().fcxservice)\n\n//   })\n// }\n//     const [icxArray , setIcx] = useState([])\n//     const [fcxArray , setFcx] = useState([])\n//     const [ccxArray , setCcx] = useState([])\n\n\n//     //Array ka Dher\n//     const [one ,setOne] = useState([])\n//     const [two ,setTwo] = useState([])\n//     const [three ,setThree] = useState([])\n//     const [four ,setFour] = useState([])\n//     // const [five ,setFive] = useState([])\n//     // const [six ,setSix] = useState([])\n\n//     const [icxUser, setIcxuser] = useState('')\n//     const [fcxUser, setFcxuser] = useState('')\n//     const [ccxUser, setCcxuser] = useState('')\n\n\n//     useEffect(() => {\n//       // Update the document title using the browser API\n//       const itemsRef1 = firebase.database().ref('icx');\n//       itemsRef1.on('value', (snapshot) => {\n//         let items = snapshot.val();\n//         // console.log(items)\n//         let newState1 = [];\n//         for (let item in items) {\n//           newState1.push({\n//             id: item,\n//             icx: items[item].icx,\n//             time: items[item].time\n//           });\n//         }\n//         setIcx(newState1)\n        \n//       });\n\n\n//       const itemsRef2 = firebase.database().ref('fcx');\n//       itemsRef2.on('value', (snapshot) => {\n//         let items = snapshot.val();\n//         console.log\n//         let newState2 = [];\n//         for (let item in items) {\n//           newState2.push({\n//             id: item,\n//             icx: items[item].fcx,\n//             time: items[item].time\n//           });\n//         }\n//         setFcx(newState2)\n        \n//       });\n\n//        const itemsRef3 = firebase.database().ref('ccx');\n//       itemsRef3.on('value', (snapshot) => {\n//         let items = snapshot.val();\n//         console.log\n//         let newState3 = [];\n//         for (let item in items) {\n//           newState3.push({\n//             id: item,\n//             icx: items[item].ccx,\n//             time: items[item].time\n//           });\n//         }\n//         setCcx(newState3)\n        \n//       });\n\n\n      \n\n//       firebase.auth().onAuthStateChanged(user => {\n//         if (user) {\n//             console.log(icxUser)\n//             // console.log(user.object)\n//             getUserData(user.uid)\n//         }\n//     })\n\n//     setOne(icxArray.concat(fcxArray))\n//     setTwo(icxArray.concat(ccxArray))  \n//     setThree(fcxArray.concat(ccxArray))\n//     setFour(one.concat(ccxArray))\n//     console.log(\"One Comes here\")\n//     console.log(one)\n//     console.log(\"One Ends Here\")\n      \n//     }, []);\n\n   \n//     // console.log(icxArray)\n//     return(\n      \n//         <View style={{flex:1,justifyContent:'center',alignContent:'center'}}>\n     \n//         <FlatList\n//       data={icxArray}\n//       renderItem={({ item }) => (\n//         <View style={{ height: 50, flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n//           <Text> {item.icx}</Text>\n//           <Text>{item.time}</Text>\n//         </View>\n//       )}\n//     />\n//     </View>\n//     );\n// }\n\n// class CallScreen extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {  };\n//     }\n//     render() {\n//         return (\n//             <View style={{flex:1,justifyContent:'center',alignContent:'center'}}>\n//                 <Text style={{textAlign:'center',marginBottom:50}}>CallScreen screen (HomeStackNavigator)</Text>\n//                 {/* <Button\n//                     title=\"See how a screen inside this stack works\"\n//                     onPress={() => {this.props.navigation.navigate('NestedHome')}}\n//                 /> */}\n//             </View>\n//         );\n//     }\n// }\n\nexport default CallScreen;"]},"metadata":{},"sourceType":"module"}